#!/bin/bash

# Default values
path="."
limit=5
depth=1
skip=0
only_names=false

# Function to display help
show_help() {
    echo "Usage: $(basename "$0") [-p path] [-l limit] [-d depth] [--only-names]"
    echo ""
    echo "Options:"
    echo "  -p              Specify the directory path (default is $path)"
    echo "  -l              Limit the number of files to display (default is $limit)"
    echo "  -d              Set the maximum recursive depth (default is $depth)"
    echo "  -s, --skip n    Skip the first 'n' largest files (default: 0)"
    echo "  --only-names    Show only the file names without size"
    echo "  -h              Show this help message"
    exit 0
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -p | --path) path="$2"; shift 2;;
        -l | --limit) limit="$2"; shift 2;;
        -d | --depth) depth="$2"; shift 2;;
        -s | --skip) skip="$2"; shift 2;;
        --only-names) only_names=true; shift 1;;
        -h | --help) show_help;;
        *) echo "Unknown option: $1"; show_help;;
    esac
done

# Validate that path is a directory
if [ ! -d "$path" ]; then
    echo "Invalid path: $path is not a directory."
    exit 1
fi

# Calculate the total number of files to consider (limit + skip)
total=$((limit + skip))

result=$(find "$path" -maxdepth "$depth" -type f -exec du -h {} + | sort -rh | head -n "$total" | tail -n "$limit")
# Command to find the biggest files
if [ "$only_names" = true ]; then
    # Show only file names
    echo "$result" | awk '{$1=""; print substr($0, 2)}'
else
    # Show file names with sizes
    echo "$result"
fi