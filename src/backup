#!/bin/bash

# ----------------------------------------------------------------------
# Constants

# What to backup
BACKUP_FILES="/etc/nginx /snap /usr/share/applications /home"

EXCLUDE_FILES="*.tmp *.log $HOME/.vscode $HOME/.cache $HOME/.dotnet $HOME/.ecryptfs $HOME/.java $HOME/.npm $HOME/.nuget $HOME/.omnisharp $HOME/.pki $HOME/.Private $HOME/.ServiceHub $HOME/.var $HOME/dotTraceSnapshots $HOME/.geph-blobs node_modules /snap $HOME/.xdm-app-data $HOME/.local $HOME/.config/Code $HOME/Downloads"

# Where to backup to
hostname=$(hostname -s)
OUTPUT_DIR="/mnt/Extrnal-Hard/Backups/$hostname"
timestamp=$(date "+%Y-%m-%d_%H-%M-%S")
output_file="$timestamp.tar.gz"
OUTPUT="$OUTPUT_DIR/$output_file"

# ----------------------------------------------------------------------
# Functions

copy_if_exists() {
    # Check if the source path is provided
    if [ -z "$1" ]; then
        echo "Source path is required."
        return 1
    fi

    # Check if the destination path is provided
    if [ -z "$2" ]; then
        echo "Destination path is required."
        return 1
    fi

    # Check if the source file or directory exists
    if [ -e "$1" ]; then
        cp -r "$1" "$2"
        echo "Copied '$1' to '$2'."
    else
        echo "Source '$1' does not exist."
        return 1
    fi
}

wait_to_press_enter() {
  local message="$1"
  if [ -n "$message" ]; then
    read -rp "$message" _
  else
    printf "Press Enter to continue..."
    read -r
  fi
  echo ""
}

# Function to prompt the user for a valid directory
get_valid_directory() {
  while true; do
    read -rp "Please enter a valid directory: " user_input

    # Check if the entered directory is valid
    if [ -d "$user_input" ]; then
      break
    fi
  done

  # Return the valid directory
  echo "$user_input"
}

create_backup() {
  if [ ! -d "$OUTPUT_DIR" ]; then
    if ! mkdir -p "$OUTPUT_DIR"; then
      OUTPUT_DIR=$(get_valid_directory)
    fi
  fi

  # Print start status message
  echo "Backing up to $OUTPUT"
  date
  echo

  # Create the exclude parameters for tar
  exclude_params=""
  for EXCLUDE in $EXCLUDE_FILES; do
    exclude_params="$exclude_params --exclude=$EXCLUDE"
  done

  sudo tar -czf "$OUTPUT" $exclude_params $BACKUP_FILES

  if [ ! -f "$OUTPUT" ] ; then
    return 1
  fi

  # Print end status message
  echo
  echo "Backup finished"
  date

  # Long listing of files in $OUTPUT to check file sizes
  ls -lh "$OUTPUT"
  return 0
}

_update() {
  if command-exists update; then
    update
  else
    sudo apt update
    sudo apt upgrade -y
    sudo apt dist-upgrade -y
    sudo snap refresh
  fi
}

backup_dejadup_settings() {
  local deja_dup_settings="$tmp_backup_dir/deja-dup-settings"
  mkdir -p "$deja_dup_settings"
  dconf dump /org/gnome/deja-dup/ >"$deja_dup_settings/deja-dup-settings.txt"

  cat <<EOF >"$deja_dup_settings/restore.sh"
#!/bin/bash

file_path="\$1"
default_value="deja-dup-settings.txt"
if [ -z "\$file_path" ]; then
  echo "Enter the backup file path: "
  read -r file_path
fi
if [ -z "\$file_path" ]; then
  file_path="\$default_value"
fi

if [ ! -f "\$file_path" ]; then
  echo "Input is not valid."
  exit 1
fi

dconf load /org/gnome/deja-dup/ < "\$file_path"
EOF
  chmod +x "$deja_dup_settings/restore.sh"
}

backup_os_configs() {
  local os_configs="$tmp_backup_dir/os-configs"

  mkdir -p "$os_configs"
  dconf dump / >"$os_configs/dconf-settings-backup.conf"
  echo "dconf load < dconf-settings-backup.conf" >"$os_configs/restore.sh"
}

backup_installed_packages() {
  local installed_packages_dir="$tmp_backup_dir/installed-packages"
  mkdir -p "$installed_packages_dir"

  dpkg --get-selections >"$installed_packages_dir/ubuntu.txt"
  snap list >"$installed_packages_dir/snap.txt"

  cat <<EOF >"$installed_packages_dir/restore.sh"
#!/bin/bash

sudo apt update
sudo apt install dselect -y
sudo dpkg --set-selections < ubuntu.txt
sudo dselect

snap list > snap.txt
EOF
  chmod +x "$installed_packages_dir/restore.sh"
}

cloning_github() {
  (cd "$tmp_backup_dir" && gh-clone-gist)
  (cd "$tmp_backup_dir" && gh-clone-repo "hamidmolareza")
  (cd "$tmp_backup_dir" && gh-clone-repo "payadel")
}

# ----------------------------------------------------------------------
# Main

# Update apps to save updated configs that match with new versions
_update

# Create backup-tmp folder
tmp_backup_dir="$HOME/my-files/backup-tmp"
mkdir -p "$tmp_backup_dir"

backup_dejadup_settings
backup_os_configs

# Backup crontab data
crontab -l >"$tmp_backup_dir/crontab_backup_$(date +%Y%m%d).txt"s

cp -r $HOME/.local/share/nautilus "$tmp_backup_dir"

copy_if_exists /home/home/.config/tabby/ "$tmp_backup_dir"

open "$tmp_backup_dir"
echo ""

# Prompt for various exports
for task in "Export browser bookmarks and extension configs" \
  "Export OneTab" \
  "Copy Joplin files" \
  "Copy IDE settings" \
  "Copy Proton password" \
  "Copy phone numbers" \
  "Copy FreeOTP" \
  "Copy Mobile Screen Shots" \
  "Mobile: Copy Poolaki data" \
  "Mobile: Make backup from phone" \
  "Copy Download Manager links" \
  "Copy phone files"; do
  echo "$task to $tmp_backup_dir/"
  wait_to_press_enter
done

backup_installed_packages

echo "Cloning GitHub repositories..."
wait_to_press_enter
cloning_github

if create_backup; then
  echo ""
  wait_to_press_enter "Press Enter to delete $tmp_backup_dir"
  sudo rm -r "$tmp_backup_dir"
fi
